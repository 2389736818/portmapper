apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
    mavenLocal()
    maven { url 'http://4thline.org/m2' }
    mavenCentral()
    flatDir { dirs 'lib' }
}

version = '2.0.0-alpha1'
sourceCompatibility = 1.7

tasks.withType(JavaCompile) {
	options.compilerArgs << '-Xlint:all'
	options.encoding = 'UTF-8'
}

test {
	if(logger.infoEnabled) {
		testLogging.showStandardStreams = true
	}
	jvmArgs '-XX:+HeapDumpOnOutOfMemoryError', '-enableassertions'
}

processResources {
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        "VERSION_NUMBER": project.version
    ]
}

jar {
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
		configurations.runtime.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest { attributes 'Main-Class': 'org.chris.portmapper.PortMapperStarter' }
}

dependencies {
	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-core:1.10.19'
	compile 'commons-cli:commons-cli:1.2'
	compile 'org.slf4j:slf4j-api:1.7.10'
	compile 'ch.qos.logback:logback-classic:1.1.2'
	compile 'com.miglayout:miglayout:3.7.4'
	compile 'org.jdesktop.bsaf:bsaf:1.9.2'
	compile ':sbbi-upnplib:1.0.4'
    compile 'org.fourthline.cling:cling-support:2.0.1'
	runtime 'commons-jxpath:commons-jxpath:1.1' // sbbi
    runtime 'org.slf4j:jul-to-slf4j:1.7.10'
}


eclipse {
	classpath {
		downloadSources = true
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		def javaVersion = project.sourceCompatibility.toString()
		def container = "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-$javaVersion"
		logger.info "Using container $container for $project"
		containers container
	}
	jdt.file {
		beforeMerged  { jdt ->
		  File defaultProperties = new File("${rootProject.projectDir}/gradle/defaultEclipseJdtPrefs.properties").absoluteFile
		  logger.info "Load defaults from $defaultProperties for $project"
		  jdt.load(defaultProperties)
		}
	  }
}